// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserApi.Data;

#nullable disable

namespace Streamscape.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240609121136_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("Api.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TitleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("Api.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action & Adventure"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Anime"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Children & Family"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Comedies"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Documentaries"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dramas"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Independent"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Sci-Fi & Fantasy"
                        });
                });

            modelBuilder.Entity("Api.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Release")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("Api.Models.TitleGenre", b =>
                {
                    b.Property<int>("TitleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TitleId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("TitleGenres");
                });

            modelBuilder.Entity("Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 9, 12, 11, 36, 329, DateTimeKind.Utc).AddTicks(7876),
                            Email = "admin@example.com",
                            Password = "$2a$11$Ra1itzxCt0VdTW7UrQFDoehDSrLQwcIo/mzWoLZSnt83s/ZbgkGaC",
                            Role = 0,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Api.Models.Episode", b =>
                {
                    b.HasOne("Api.Models.Title", "Title")
                        .WithMany("Episodes")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Api.Models.TitleGenre", b =>
                {
                    b.HasOne("Api.Models.Genre", "Genre")
                        .WithMany("TitleGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.Title", "Title")
                        .WithMany("TitleGenres")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Api.Models.Genre", b =>
                {
                    b.Navigation("TitleGenres");
                });

            modelBuilder.Entity("Api.Models.Title", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("TitleGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
